

** THE .AAF FORMAT **
.aaf is used by a few Nintendo games (e.g. Zelda: Wind Waker, Pikmin 2) for what appears to be soundbanks.



** Description **
.aaf has no magic number that would identify the format. Instead, it starts off with the description of data chunks.
All values are 4 byte big big endian unsigned integers. For each chunk the first value describes the chunk ID. 


Chunk ID #1: Offset | Size | Unknown (always 0?)
Purpose of this chunk is unknown as of now. Offset and size describes the position of a data piece in the aaf file.

Chunk ID #2: Several entries in the form of Offset | Size | Unknown (always 0?)
Purpose unknown. Each entry describes the position and size of a data piece in the aaf file.
The list of entries is terminated with a value of 0, i.e. if you read an offset and the offset is 0,
stop reading at once because the next chunk starts.

Chunk ID #3: Format similar to #2. 
Only seems to contain one entry in Pikmin 2, and the unknown value is 2. The offset points to data starting with WSYS.

Chunk ID #5: Format see #1. Purpose unknown.
Chunk ID #6: Format see #1. Purpose unknown.
Chunk ID #7: Format see #1. Purpose unknown.

Chunk ID #0 signals the end of the description of data chunks.

-------------------------

WSYS Format:
Chunk ID 3 points to WSYS data. The data starts with a 4 byte string spelling "WSYS".
Structure: 4 bytes unknown (size or some kind of offset?) and 8 bytes of unknown values (all zeros?)
4 bytes offset from the start of WSYS to the start of WINF.
Rest of WSYS is not handled by wwdumpsnd.

WINF Format:
First 4 bytes spell "WINF", followed by a value that specifies the amount of .aw files used. Then follow the 4 byte offsets 
of as many aw files as the value before specified.

